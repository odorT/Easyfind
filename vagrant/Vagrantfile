# -*- mode: ruby -*-
# vi: set ft=ruby :

# Installing vagrant plugins: vagrant-hostmanager for configuring vm-vm network,
# vagrant-reload for easy and safe reloading after provisioning.
puts "Checking and installing required plugins"
required_plugins = ['vagrant-hostmanager', 'vagrant-reload']

plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
    if system "vagrant plugin install #{plugins_to_install.join(' ')}"
        exec "vagrant #{ARGV.join(' ')}"
    else
        abort "Installation of one or more plugins has failed. Aborting."
    end
end
puts "Plugins have been installed."

# initScript will create new user, add it to sudoers group and call java.sh script inside that user.
$initScript = <<-SCRIPT
    id -u app-user &>/dev/null || sudo useradd -s /bin/bash -d /home/app-user/ -m -p $(openssl passwd -1 app-user) -G sudo app-user
    sudo echo "app-user ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/app-user
    sudo su - app-user
    cd /home/app-user
    /bin/bash /vagrant/entrypoint.sh
SCRIPT

Vagrant.configure("2") do |config|

    #config.vm.provision "shell", privileged: false, inline: $global
    # following line is for sharing host machine's vagrant folder, where all scripts are located and called.
    config.vm.synced_folder ".", "/vagrant", type: "nfs"
    config.vm.boot_timeout = 1800

    # Following part will automatically add db_vm and app_vm ip
    # addresses to /etc/hosts files using vagrant-hostmanager plugin.
    if Vagrant.has_plugin?("vagrant-hostmanager")
        config.hostmanager.enabled = true
        config.hostmanager.manage_host = true
        config.hostmanager.ignore_private_ip = false
        config.hostmanager.include_offline = true
    end

    config.vm.define :APP_VM do |app|
        app.vm.box = "ubuntu/focal64"
        app.vm.hostname = "app"
        app.vm.provision "shell", inline: $initScript
        config.vm.provision "file", source: ".env", destination: "~/iBuy/.env"
        app.vm.network :private_network, ip: "192.168.33.11"
        # guest machine's 8080 port is forwarded to host's 8001(if not busy, otherwise
        # port number will be taken from usable port pool)
        app.vm.network "forwarded_port", guest: 5000, host: 5001,
        auto_correct: true
        app.vm.usable_port_range = 4500..5500
        app.vm.provider "virtualbox" do |vb|
            vb.name = "APP_VM"
            vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
            vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
            vb.customize ["modifyvm", :id, "--ioapic", "on"]
            vb.memory = "3072"
            vb.cpus = "3"
        end
    end
end
